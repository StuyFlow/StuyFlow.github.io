{"version":3,"sources":["pages/Home.js","pages/About.js","pages/Contact.js","pages/Board.js","pages/Photos.js","pages/Videos.js","pages/Resources.js","pages/Error.js","pages/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","About","Contact","Board","Photos","Videos","Resources","Error","beforeHome","afterHome","Nav","style","display","map","link","k","to","key","textTransform","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAUeA,E,uKANP,OACI,2D,GAHOC,aCQJC,E,uKANP,OACI,4D,GAHQD,aCQLE,E,uKANP,OACI,8D,GAHUF,aCQPG,E,uKANP,OACI,4D,GAHQH,aCQLI,E,uKANP,OACI,6D,GAHSJ,aCQNK,E,uKANP,OACI,6D,GAHSL,aCQNM,E,uKANP,OACI,gE,GAHYN,aCQTO,E,uKANP,OACI,qE,GAHQP,a,QCCdQ,EAAa,CAAC,QAAS,QAAS,WAChCC,EAAY,CAAC,SAAU,YAAa,UAgC3BC,E,uKA5BP,OACI,yBAAKC,MAAO,CAACC,QAAS,SACjBJ,EAAWK,KAAI,SAACC,EAAMC,GACnB,OACI,kBAAC,IAAD,CAAMC,GAAIF,EAAMG,IAAKF,GACjB,0BAAMJ,MAAO,CAACO,cAAe,eACxBJ,OAKjB,kBAAC,IAAD,CAAME,GAAG,IACL,2CAEHP,EAAUI,KAAI,SAACC,EAAMC,GAClB,OACI,kBAAC,IAAD,CAAMC,GAAIF,EAAMG,IAAKF,GACjB,0BAAMJ,MAAO,CAACO,cAAe,eACxBJ,Y,GApBfd,aC0BHmB,E,uKAlBP,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWpB,IAChC,kBAAC,IAAD,CAAOmB,KAAK,WAAWC,UAAWnB,IAClC,kBAAC,IAAD,CAAOkB,KAAK,SAASC,UAAWlB,IAChC,kBAAC,IAAD,CAAOiB,KAAK,UAAUC,UAAWjB,IACjC,kBAAC,IAAD,CAAOgB,KAAK,UAAUC,UAAWhB,IACjC,kBAAC,IAAD,CAAOe,KAAK,aAAaC,UAAWf,IACpC,kBAAC,IAAD,CAAOc,KAAK,IAAIE,OAAK,EAACD,UAAWtB,IACjC,kBAAC,IAAD,CAAOqB,KAAK,IAAIC,UAAWd,U,GAb7BP,aCAEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACI,kBAAC,EAAD,QAGNC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.01c48a07.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Home extends Component {\n    render() {\n        return (\n            <h1>Hi. I am the Home Page.</h1>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nclass About extends Component {\n    render() {\n        return (\n            <h1>Hi. I am the About Page.</h1>\n        );\n    }\n}\n\nexport default About;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n    render() {\n        return (\n            <h1>Hi. I am the Contact Page.</h1>\n        );\n    }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\n\nclass Board extends Component {\n    render() {\n        return (\n            <h1>Hi. I am the Board Page.</h1>\n        );\n    }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\n\nclass Photos extends Component {\n    render() {\n        return (\n            <h1>Hi. I am the Photos Page.</h1>\n        );\n    }\n}\n\nexport default Photos;\n","import React, { Component } from 'react';\n\nclass Videos extends Component {\n    render() {\n        return (\n            <h1>Hi. I am the Videos Page.</h1>\n        );\n    }\n}\n\nexport default Videos;\n","import React, { Component } from 'react';\n\nclass Resources extends Component {\n    render() {\n        return (\n            <h1>Hi. I am the Resources Page.</h1>\n        );\n    }\n}\n\nexport default Resources;\n","import React, { Component } from 'react';\n\nclass Error extends Component {\n    render() {\n        return (\n            <h1>Hi. I am the Error Page. 404 LMAO</h1>\n        );\n    }\n}\n\nexport default Error;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst beforeHome = [\"about\", \"board\", \"contact\"];\nconst afterHome = [\"photos\", \"resources\", \"videos\"];\n\nclass Nav extends Component {\n    render() {\n        return (\n            <div style={{display: \"flex\"}}>\n                {beforeHome.map((link, k) => {\n                    return (\n                        <Link to={link} key={k}>\n                            <span style={{textTransform: \"capitalize\"}}>\n                                {link}\n                            </span>\n                        </Link>\n                    );\n                })}\n                <Link to=\"\">\n                    <span>STUYFLOW</span>\n                </Link>\n                {afterHome.map((link, k) => {\n                    return (\n                        <Link to={link} key={k}>\n                            <span style={{textTransform: \"capitalize\"}}>\n                                {link}\n                            </span>\n                        </Link>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home.js';\nimport About from './pages/About.js';\nimport Contact from './pages/Contact.js';\nimport Board from './pages/Board.js';\nimport Photos from './pages/Photos.js';\nimport Videos from './pages/Videos.js';\nimport Resources from './pages/Resources.js';\nimport Error from './pages/Error.js';\nimport Nav from './pages/Nav.js';\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Nav />\n                <Switch>\n                    <Route path=\"/about\" component={About}/>\n                    <Route path=\"/contact\" component={Contact}/>\n                    <Route path=\"/board\" component={Board}/>\n                    <Route path=\"/photos\" component={Photos}/>\n                    <Route path=\"/videos\" component={Videos}/>\n                    <Route path=\"/resources\" component={Resources}/>\n                    <Route path=\"/\" exact component={Home}/>\n                    <Route path=\"/\" component={Error}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n        <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}